package com.github.parkalot.service.impl;

import java.time.DayOfWeek;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.parkalot.dao.RatingDAO;
import com.github.parkalot.model.Rating;
import com.github.parkalot.service.RatingService;

@Service
public class RatingServiceImpl implements RatingService {

	private static final Logger LOGGER = Logger.getLogger(RatingServiceImpl.class);
	private static final int MIN_HOUR = 0;
	private static final int MAX_HOUR = 24;

	@Autowired
	private RatingDAO ratingDao;

	@Override
	public void addRating(Rating rating) {
		// TODO Auto-generated method stub
	}

	@Override
	public void updateRating(Rating rating) {
		// TODO Auto-generated method stub

	}

	@Override
	public List<Rating> getRatingsByHour(Long parkingLotId, int hour) {
		List<Rating> ratingList = new ArrayList<Rating>();
		try {
			ratingList = ratingDao.getRatingsByHour(parkingLotId, hour);
		} catch (Exception e) {
			LOGGER.error("Error retrieving resultset: ", e);
		}

		return ratingList;
	}

	@Override
	public List<Rating> getRatingsBetweenHours(Long parkingLotId, int minHour, int maxHour) {
		List<Rating> ratingList = new ArrayList<Rating>();
		try {
			if (isHourRangeValid(minHour, maxHour)) {
				throw new Exception("Invalid hour range - must be between 0 and 24");
			}

			ratingList = ratingDao.getRatingsBetweenHours(parkingLotId, minHour, maxHour);
		} catch (Exception e) {
			LOGGER.error("Error retrieving resultset: ", e);
		}
		return ratingList;
	}

	@Override
	public List<Rating> getRatingsByDayOfWeek(DayOfWeek weekDay) {
		List<Rating> ratingList = new ArrayList<Rating>();
		try {
			ratingList = ratingDao.getRatingsByDayOfWeek(weekDay);
		} catch (Exception e) {
			LOGGER.error("Error retrieving resultset: ", e);
		}
		return ratingList;
	}

	@Override
	public List<Rating> getAllRatingsByParkingLotId(Long parkingLotId) {
		List<Rating> ratingList = new ArrayList<Rating>();
		try {
			ratingList = ratingDao.getAllRatingsByParkingLotId(parkingLotId);
		} catch (Exception e) {
			LOGGER.error("Error retrieving resultset: ", e);
		}
		return ratingList;
	}

	private boolean isHourRangeValid(int min, int max) {
		if (min > max || min <= MIN_HOUR || max >= MAX_HOUR) {
			return false;
		}

		return true;
	}
	
	private boolean isHourValueValid(int hour) {
		return MIN_HOUR >= hour && hour <= MAX_HOUR;
	}

}
