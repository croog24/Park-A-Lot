package com.github.parkalot.service;

import static org.junit.Assert.*;
import static org.mockito.Matchers.eq;

import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.util.ReflectionTestUtils;

import com.github.parkalot.TestContext;
import com.github.parkalot.dao.impl.RatingDAOImpl;
import com.github.parkalot.model.Rating;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = { TestContext.class })
public class TestRatingService {

	@Autowired
	private RatingService ratingService;

	private RatingDAOImpl mockRatingDAOImpl;

	@Before
	public void init() {
		mockRatingDAOImpl = Mockito.mock(RatingDAOImpl.class);
		ReflectionTestUtils.setField(ratingService, "ratingDao", mockRatingDAOImpl);
	}

	@Test
	public void testAddRating() throws Exception {
		Rating rating = new Rating(1, 5, 3);
		ratingService.addRating(rating);
	}

	@Test
	public void testGetAllRatingsByParkingLotId() throws Exception {
		final int expectedListSize = 2;
		List<Rating> mockList = Arrays.asList(new Rating(1, 2, 3), new Rating(4, 5, 6));
		Mockito.when(mockRatingDAOImpl.getAllRatingsByParkingLotId(eq(123L))).thenReturn(mockList);
		List<Rating> resultList = ratingService.getAllRatingsByParkingLotId(123L);
		
		assertEquals("Unexpected result size", expectedListSize, resultList.size());
	}
	
	@Test
	public void test() throws Exception {
	}
}
